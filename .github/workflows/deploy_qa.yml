name: Deploy to QA EC2

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  check-new-image:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      AWS_ID: '035863456454'
      INFRA_REPO_PATH: infra-repo
      SSH_FILE_NAME: test-ec2-instance
      RDS_HOST: database-bookstore.csn8rgd2nomm.us-east-1.rds.amazonaws.com
      QA_EC2_NAME: QA Bookstore
      QA_DB_NAME: qa_db
      COMPOSE_FILE: compose.qa.yml
      NGINX_CONF: nginx.qa.conf
      ECR_BACKEND_REPO: bookstore-backend
      ECR_FRONTEND_REPO: bookstore-frontend

    steps:
      # 1. Make sure the docker-compose file and nginx.conf are up to date
      - name: Checkout infrastructure repo
        uses: actions/checkout@v4
        with:
          repository: aawihardja-usfca/bookstore-infra
          path: ${{ env.INFRA_REPO_PATH }}
          ref: test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Get QA EC2 IP address
        run: |
          INSTANCE_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=${{ env.QA_EC2_NAME }}" \
          --query "Reservations[*].Instances[*].[PublicIpAddress]" \
          --output text)
          
          echo "QA_EC2_IP=${INSTANCE_IP}" >> $GITHUB_ENV

      - name: Copy SSH private key to Github env
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/${{ env.SSH_FILE_NAME }}.pem
          chmod 400 ~/.ssh/${{ env.SSH_FILE_NAME }}.pem
      
      - name: Copy docker-compose to QA EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/${{ env.SSH_FILE_NAME }}.pem \
          ${INFRA_REPO_PATH}/${{ env.COMPOSE_FILE }} ec2-user@${{ env.QA_EC2_IP }}:~/compose.yml
          
          scp -o StrictHostKeyChecking=no -i ~/.ssh/${{ env.SSH_FILE_NAME }}.pem \
          ${INFRA_REPO_PATH}/${{ env.NGINX_CONF }} ec2-user@${{ env.QA_EC2_IP }}:~/nginx.conf

      # 2. Compare image digest to see if it needs updating
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get latest image digest from ECR
        id: latest_image
        run: |
          LATEST_DIGEST=$(aws ecr describe-images \
            --repository-name $ECR_BACKEND_REPO \
            --region $AWS_REGION \
            --query "sort_by(imageDetails,& imagePushedAt)[-1].imageDigest" \
            --output text)
          echo "LATEST_DIGEST=$LATEST_DIGEST" >> $GITHUB_ENV
          echo "Latest Digest is: $LATEST_DIGEST"

      - name: Get running container digest from QA EC2
        id: running_image          
        run: |
          IMG_NAME="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_BACKEND_REPO }}:latest"

          # SSH into QA EC2, suppress login messages, and retrieve the digest
          RUNNING_DIGEST=$(ssh -o StrictHostKeyChecking=no -i ~/.ssh/${{ env.SSH_FILE_NAME }}.pem \
            -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null ec2-user@${{ env.QA_EC2_IP }} \
            "docker inspect --format='{{index .RepoDigests 0}}' \"$IMG_NAME\" 2>/dev/null | cut -d'@' -f2 || echo NOT_FOUND")

          # Remove any unexpected output
          RUNNING_DIGEST=$(echo "$RUNNING_DIGEST" | tr -d '\r' | awk '{$1=$1;print}')

          # Validate output
          if [[ "$RUNNING_DIGEST" == "NOT_FOUND" || -z "$RUNNING_DIGEST" ]]; then
            echo "No running container found for $IMG_NAME"
            echo "RUNNING_DIGEST=" >> $GITHUB_ENV  # Set an empty value
          else
            echo "RUNNING_DIGEST=$RUNNING_DIGEST" >> $GITHUB_ENV
            echo "Running Digest is: $RUNNING_DIGEST"
          fi

      # 3a. If there is a new image, stop running containers, pull latest image, and restart compose
      - name: Deploy updated container on QA EC2
        if: ${{ env.LATEST_DIGEST != env.RUNNING_DIGEST }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/${{ env.SSH_FILE_NAME }}.pem ec2-user@${{ env.QA_EC2_IP }} << 'EOF'
            export ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
            export ECR_BACKEND_REPO="${{ env.ECR_BACKEND_REPO }}"
            export ECR_FRONTEND_REPO="${{ env.ECR_FRONTEND_REPO }}"
            export IMAGE_TAG="latest"
            export RDS_HOST="${{ env.RDS_HOST }}"
            export RDS_USER="${{ secrets.RDS_USER }}"
            export RDS_PASSWORD="${{ secrets.RDS_PASSWORD }}"
            export DB_NAME="${{ env.QA_DB_NAME }}"

            echo "Environment variables set:"
            
            echo "Stopping running containers..."
            docker compose -f compose.yml down
            
            echo "Removing unused images..."
            docker image prune -f

            echo "Logging into AWS ECR..."
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

            echo "Pulling latest images..."
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_BACKEND_REPO }}:latest
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_FRONTEND_REPO }}:latest

            echo "Restarting services with Docker Compose..."
            docker compose -f compose.yml up -d
          EOF
      
      # 3b. If there is no new image, just restart compose
      - name: Restart container if digest is unchanged
        if: ${{ env.LATEST_DIGEST == env.RUNNING_DIGEST }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/${{ env.SSH_FILE_NAME }}.pem ec2-user@${{ env.QA_EC2_IP }} << 'EOF'
            export ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
            export ECR_BACKEND_REPO="${{ env.ECR_BACKEND_REPO }}"
            export ECR_FRONTEND_REPO="${{ env.ECR_FRONTEND_REPO }}"
            export IMAGE_TAG="latest"
            export RDS_HOST="${{ env.RDS_HOST }}"
            export RDS_USER="${{ secrets.RDS_USER }}"
            export RDS_PASSWORD="${{ secrets.RDS_PASSWORD }}"
            export DB_NAME="${{ env.QA_DB_NAME }}"

            echo "Stopping running containers..."
            docker compose -f compose.yml down

            echo "Restarting services with Docker Compose..."
            docker compose -f compose.yml up -d
          EOF
