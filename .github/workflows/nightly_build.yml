name: Nightly Build

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch: 

jobs:
  build-test:
    runs-on: ubuntu-latest
    env:
      SOURCE_REPO_PATH: source-repo
      INFRA_REPO_PATH: infra-repo
      SSH_FILE_NAME: test-ec2-instance
      AWS_REGION: us-east-1
      AWS_ID: '035863456454'
      RDS_HOST: database-bookstore.csn8rgd2nomm.us-east-1.rds.amazonaws.com
      TEST_DB_NAME: test_db
      COMPOSE_FILE: compose
      TEMP_EC2_NAME: TEMP Bookstore
      TEMP_IMG_TAG: temp
      ECR_BACKEND_REPO: bookstore-backend
      ECR_FRONTEND_REPO: bookstore-frontend

    steps:
      # 1. Checkout code
      - name: Checkout source repo
        uses: actions/checkout@v4
        with:
          repository: aawihardja-usfca/bookstore
          path: ${{ env.SOURCE_REPO_PATH }}

      - name: Checkout infrastructure repo
        uses: actions/checkout@v4
        with:
          repository: aawihardja-usfca/bookstore-infra
          path: ${{ env.INFRA_REPO_PATH }}
          ref: test

      # 2. Configure AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 3. Build Docker images
      - name: Build Docker images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run : |
          docker build -t $ECR_REGISTRY/${{ env.ECR_BACKEND_REPO }}:${{ env.TEMP_IMG_TAG }} ./${{ env.SOURCE_REPO_PATH }}/backend
          docker build -t $ECR_REGISTRY/${{ env.ECR_FRONTEND_REPO }}:${{ env.TEMP_IMG_TAG }} ./${{ env.SOURCE_REPO_PATH }}/frontend
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      # 4. Push images to ECR
      - name: Push Docker images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker push $ECR_REGISTRY/${{ env.ECR_BACKEND_REPO }}:${{ env.TEMP_IMG_TAG }}
          docker push $ECR_REGISTRY/${{ env.ECR_FRONTEND_REPO }}:${{ env.TEMP_IMG_TAG }}

      # 5. Spin up a temporary EC2 & Wait until it is running
      - name: Launch TempEC2
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ami-05b10e08d247fb927 \
          --instance-type t2.micro \
          --key-name test-ec2-instance \
          --security-group-ids sg-01f7f4b93d2a0f127 sg-07486764dc18ccdcc \
          --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=${{ env.TEMP_EC2_NAME }}}]' \
          --query "Instances[0].InstanceId" \
          --output text)

          aws ec2 wait instance-running --instance-ids ${INSTANCE_ID}

          INSTANCE_IP=$(aws ec2 describe-instances \
          --instance-ids ${INSTANCE_ID} \
          --query "Reservations[0].Instances[0].PublicIpAddress" \
          --output text)

          echo "TEMP_EC2_IP=${INSTANCE_IP}" >> $GITHUB_ENV
          echo "TEMP_EC2_ID=${INSTANCE_ID}" >> $GITHUB_ENV
          echo "Instance ${INSTANCE_ID} is now running!"
      
      - name: Use the IP address
        run: echo "TEMP EC2 IP=${{ env.TEMP_EC2_IP }}"

      - name: Copy SSH private key to Github env
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/${{ env.SSH_FILE_NAME }}.pem
          chmod 400 ~/.ssh/${{ env.SSH_FILE_NAME }}.pem

      - name: Wait for SSH
        run: |
          max_attempts=10
          attempt=0
          until ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -i ~/.ssh/${{ env.SSH_FILE_NAME }}.pem ec2-user@${{ env.TEMP_EC2_IP }} 'echo "SSH ready"'; do
            attempt=$((attempt+1))
            if [ $attempt -eq $max_attempts ]; then
              echo "SSH is not available after $max_attempts attempts. Exiting."
              exit 1
            fi
            echo "SSH not ready, retrying in 10 seconds... (attempt $attempt)"
            sleep 10
          done
      
      - name: Setup TempEC2 environment
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/${{ env.SSH_FILE_NAME }}.pem ec2-user@${{ env.TEMP_EC2_IP }} << 'EOF'
            sudo dnf update -y
            sudo dnf install -y docker
            sudo service docker start
            sudo usermod -aG docker ec2-user
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            if ! rpm -q mariadb105; then
              sudo dnf install -y mariadb105
            else
              echo "mariadb already installed"
            fi
          EOF

      # 6. Init RDS for testing
      - name: Prepare SQL init file
        run: |
          sed "s|DB_NAME|${{ env.TEST_DB_NAME }}|g" ${INFRA_REPO_PATH}/init.sql.template > ${INFRA_REPO_PATH}/init.sql

      - name: Copy SQL init file to Temp EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/${{ env.SSH_FILE_NAME }}.pem \
          ${INFRA_REPO_PATH}/init.sql ec2-user@${{ env.TEMP_EC2_IP }}:~/init.sql

      - name: Initialize RDS on Temp EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/${{ env.SSH_FILE_NAME }}.pem ec2-user@${{ env.TEMP_EC2_IP }} << 'EOF'
            mysql -h ${{ env.RDS_HOST }} \
              -u ${{ secrets.RDS_USER }} \
              -p${{ secrets.RDS_PASSWORD }} \
              -P 3306 < ~/init.sql
          EOF

      # 7. Pull build images from ECR
      - name: Pull images from ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/${{ env.SSH_FILE_NAME }}.pem ec2-user@${{ env.TEMP_EC2_IP }} << EOF
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

            docker pull $ECR_REGISTRY/${{ env.ECR_BACKEND_REPO }}:${{ env.TEMP_IMG_TAG }}
            docker pull $ECR_REGISTRY/${{ env.ECR_FRONTEND_REPO }}:${{ env.TEMP_IMG_TAG }}
          EOF
      
      - name: Copy docker-compose for test in TempEC2
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/${{ env.SSH_FILE_NAME }}.pem \
          ${INFRA_REPO_PATH}/${{ env.COMPOSE_FILE }}.yml ec2-user@${{ env.TEMP_EC2_IP }}:~/${{ env.COMPOSE_FILE }}.yml
          
          scp -o StrictHostKeyChecking=no -i ~/.ssh/${{ env.SSH_FILE_NAME }}.pem \
          ${INFRA_REPO_PATH}/nginx.conf ec2-user@${{ env.TEMP_EC2_IP }}:~
      
      - name: Run the application in TempEC2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/${{ env.SSH_FILE_NAME }}.pem ec2-user@${{ env.TEMP_EC2_IP }} << EOF
            export RDS_HOST=${{ env.RDS_HOST }}
            export RDS_USER=${{ secrets.RDS_USER }}
            export RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}
            export DB_NAME=${{ env.TEST_DB_NAME }}
            export ECR_REGISTRY=$ECR_REGISTRY
            export ECR_BACKEND_REPO=${{ env.ECR_BACKEND_REPO }}
            export ECR_FRONTEND_REPO=${{ env.ECR_FRONTEND_REPO }}
            export IMAGE_TAG=${{ env.TEMP_IMG_TAG }}
            docker-compose -f ${{ env.COMPOSE_FILE }}.yml up -d
          EOF

      # 8. Run integration tests
      - name: Run integration tests in TempEC2
        id: integration_tests
        env:
          TEMP_EC2_IP: ${{ env.TEMP_EC2_IP }}
        run: |
          cd ./${{ env.SOURCE_REPO_PATH }}
          chmod +x integration_test.sh
          ./integration_test.sh
    
      # 9. If tests passed, retag the images, otherwise delete them
      - name: Retag Docker images
        if: ${{ steps.integration_tests.outcome == 'success' }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run : |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

          TIMESTAMP=$(date +'%Y%m%d%H%M')
          docker tag $ECR_REGISTRY/$ECR_BACKEND_REPO:${{ env.TEMP_IMG_TAG }} $ECR_REGISTRY/$ECR_BACKEND_REPO:latest
          docker tag $ECR_REGISTRY/$ECR_BACKEND_REPO:${{ env.TEMP_IMG_TAG }} $ECR_REGISTRY/$ECR_BACKEND_REPO:$TIMESTAMP
          docker tag $ECR_REGISTRY/$ECR_FRONTEND_REPO:${{ env.TEMP_IMG_TAG }} $ECR_REGISTRY/$ECR_FRONTEND_REPO:latest
          docker tag $ECR_REGISTRY/$ECR_FRONTEND_REPO:${{ env.TEMP_IMG_TAG }} $ECR_REGISTRY/$ECR_FRONTEND_REPO:$TIMESTAMP

          docker push $ECR_REGISTRY/$ECR_BACKEND_REPO:latest
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPO:$TIMESTAMP
          docker push $ECR_REGISTRY/$ECR_FRONTEND_REPO:latest
          docker push $ECR_REGISTRY/$ECR_FRONTEND_REPO:$TIMESTAMP

    # 10. Cleanup testing env
      - name: Delete temp tag from ECR
        if: always()
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          aws ecr batch-delete-image --repository-name $ECR_BACKEND_REPO --image-ids imageTag=${{ env.TEMP_IMG_TAG }}
          aws ecr batch-delete-image --repository-name $ECR_FRONTEND_REPO --image-ids imageTag=${{ env.TEMP_IMG_TAG }}

      - name: Cleanup TEMP EC2 env
        if: always()
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/${{ env.SSH_FILE_NAME }}.pem ec2-user@${{ env.TEMP_EC2_IP }} << 'EOF'            
            mysql -h ${{ env.RDS_HOST }} \
              -u ${{ secrets.RDS_USER }} \
              -p${{ secrets.RDS_PASSWORD }} \
              -P 3306 \
              -e "DROP DATABASE ${{ env.TEST_DB_NAME }}"
          EOF
          aws ec2 terminate-instances --instance-ids ${{ env.TEMP_EC2_ID }}